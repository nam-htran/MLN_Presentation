
===== ./next.config.js =====
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,
};

module.exports = nextConfig;

===== ./tailwind.config.ts =====
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./app/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}",
  ],
  darkMode: "class",
  theme: {
    extend: {
      colors: {
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        muted: "hsl(var(--muted))",
        "muted-foreground": "hsl(var(--muted-foreground))",
        primary: "hsl(var(--primary))",
        "primary-foreground": "hsl(var(--primary-foreground))",
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
    },
  },
  plugins: [],
};


===== ./components.json =====
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "iconLibrary": "lucide",
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "registries": {}
}


===== ./tsconfig.json =====
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


===== ./next-env.d.ts =====
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.


===== ./components/timeline-section.tsx =====
"use client"

import { useState } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Calendar, MapPin } from "lucide-react"

const timelineEvents = [
  {
    year: "2879 TCN",
    title: "Th·ªùi H·ªìng B√†ng",
    description: "Vua H√πng th·ª© nh·∫•t l·∫≠p n∆∞·ªõc VƒÉn Lang, kh·ªüi ƒë·∫ßu l·ªãch s·ª≠ d√¢n t·ªôc Vi·ªát Nam",
    period: "Th·ªùi k·ª≥ huy·ªÅn tho·∫°i",
    location: "ƒê·ªìng b·∫±ng s√¥ng H·ªìng",
    icon: "üëë",
  },
  {
    year: "257 TCN",
    title: "N∆∞·ªõc √Çu L·∫°c",
    description: "An D∆∞∆°ng V∆∞∆°ng th·ªëng nh·∫•t √Çu Vi·ªát v√† L·∫°c Vi·ªát, x√¢y d·ª±ng th√†nh C·ªï Loa",
    period: "Th·ªùi k·ª≥ c·ªï ƒë·∫°i",
    location: "C·ªï Loa, H√† N·ªôi",
    icon: "üè∞",
  },
  {
    year: "111 TCN",
    title: "B·∫Øc thu·ªôc l·∫ßn 1",
    description: "Nh√† H√°n chinh ph·ª•c √Çu L·∫°c, b·∫Øt ƒë·∫ßu th·ªùi k·ª≥ B·∫Øc thu·ªôc ƒë·∫ßu ti√™n",
    period: "Th·ªùi B·∫Øc thu·ªôc",
    location: "Giao Ch·ªâ",
    icon: "‚öîÔ∏è",
  },
  {
    year: "40 SCN",
    title: "Kh·ªüi nghƒ©a Hai B√† Tr∆∞ng",
    description: "Tr∆∞ng Tr·∫Øc v√† Tr∆∞ng Nh·ªã kh·ªüi nghƒ©a ch·ªëng qu√¢n H√°n, l·∫≠p n∆∞·ªõc ƒê·∫°i C·ªì Vi·ªát",
    period: "Th·ªùi k·ª≥ kh√°ng chi·∫øn",
    location: "M√™ Linh, H√† N·ªôi",
    icon: "üë∏",
  },
  {
    year: "939",
    title: "Ng√¥ Quy·ªÅn th·∫Øng tr·∫≠n B·∫°ch ƒê·∫±ng",
    description: "ƒê√°nh b·∫°i qu√¢n Nam H√°n, k·∫øt th√∫c 1000 nƒÉm B·∫Øc thu·ªôc",
    period: "ƒê·ªôc l·∫≠p t·ª± ch·ªß",
    location: "S√¥ng B·∫°ch ƒê·∫±ng",
    icon: "üõ°Ô∏è",
  },
  {
    year: "1010",
    title: "ThƒÉng Long th√†nh ƒë√¥",
    description: "L√Ω Th√°i T·ªï d·ªùi ƒë√¥ v·ªÅ ThƒÉng Long, m·ªü ƒë·∫ßu th·ªùi k·ª≥ ph√°t tri·ªÉn r·ª±c r·ª°",
    period: "Nh√† L√Ω",
    location: "ThƒÉng Long (H√† N·ªôi)",
    icon: "üèõÔ∏è",
  },
]

export function TimelineSection() {
  const [selectedEvent, setSelectedEvent] = useState(0)

  return (
    <section className="py-20 bg-gradient-to-b from-slate-100 to-white relative overflow-hidden">
      <div className="absolute top-20 right-10 w-32 h-32 bg-gradient-to-br from-accent/10 to-secondary/10 rounded-full animate-parallax-float blur-xl"></div>
      <div className="absolute bottom-20 left-10 w-24 h-24 bg-gradient-to-br from-secondary/10 to-accent/10 rounded-full animate-elegant-scale blur-xl"></div>

      <div className="container mx-auto px-6 relative z-10">
        <div className="text-center mb-16">
          <Badge className="mb-4 premium-card text-white animate-luxury-glow">Timeline L·ªãch S·ª≠</Badge>
          <h2 className="text-4xl md:text-5xl font-bold luxury-text mb-6">D√≤ng Ch·∫£y Th·ªùi Gian</h2>
          <p className="text-xl text-muted-foreground max-w-2xl mx-auto animate-fade-in-up">
            Theo d√µi nh·ªØng m·ªëc son quan tr·ªçng trong l·ªãch s·ª≠ d√¢n t·ªôc Vi·ªát Nam
          </p>
        </div>

        <div className="relative">
          <div className="absolute left-1/2 transform -translate-x-1/2 w-1 h-full bg-gradient-to-b from-accent to-secondary rounded-full animate-luxury-glow"></div>

          <div className="space-y-12">
            {timelineEvents.map((event, index) => (
              <div
                key={index}
                className={`flex items-center ${index % 2 === 0 ? "flex-row" : "flex-row-reverse"} animate-fade-in-up`}
                style={{ animationDelay: `${index * 200}ms` }}
              >
                <div className="flex-1 px-8">
                  <Card
                    className={`cursor-pointer sophisticated-hover premium-card ${
                      selectedEvent === index ? "ring-2 ring-accent animate-luxury-glow" : ""
                    }`}
                    onClick={() => setSelectedEvent(index)}
                  >
                    <CardContent className="p-6">
                      <div className="flex items-center gap-3 mb-3">
                        <span className="text-2xl animate-elegant-scale">{event.icon}</span>
                        <Badge variant="outline" className="text-accent border-accent elegant-border">
                          {event.year}
                        </Badge>
                      </div>
                      <h3 className="text-xl font-bold luxury-text mb-2">{event.title}</h3>
                      <p className="text-muted-foreground mb-4">{event.description}</p>
                      <div className="flex flex-wrap gap-2 text-sm text-muted-foreground">
                        <div className="flex items-center gap-1">
                          <Calendar className="w-4 h-4" />
                          {event.period}
                        </div>
                        <div className="flex items-center gap-1">
                          <MapPin className="w-4 h-4" />
                          {event.location}
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>

                <div className="relative z-10">
                  <div
                    className={`w-6 h-6 rounded-full border-4 border-white transition-all duration-300 animate-luxury-glow ${
                      selectedEvent === index ? "bg-accent scale-125" : "bg-secondary"
                    }`}
                  ></div>
                </div>

                <div className="flex-1 px-8"></div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>
  )
}


===== ./components/laws-horizontal-scroll-section.tsx =====
// components/laws-horizontal-scroll-section.tsx
"use client"

import { useEffect, useRef, useState } from "react"
import { Waves, TrendingUp, RefreshCw } from "lucide-react"

const laws = [
  {
    name: "Quy lu·∫≠t M√¢u thu·∫´n",
    summary: "Ngu·ªìn G·ªëc C·ªßa S·ª± V·∫≠n ƒê·ªông",
    description: "M·ªçi s·ª± v·∫≠t ƒë·ªÅu ch·ª©a ƒë·ª±ng c√°c m·∫∑t ƒë·ªëi l·∫≠p. S·ª± ƒë·∫•u tranh gi·ªØa ch√∫ng ch√≠nh l√† ngu·ªìn g·ªëc n·ªôi t·∫°i, t·∫°o ra ƒë·ªông l·ª±c cho m·ªçi s·ª± ph√°t tri·ªÉn.",
    icon: Waves,
    color: "#3b82f6", // Blue
  },
  {
    name: "Quy lu·∫≠t L∆∞·ª£ng - Ch·∫•t",
    summary: "C√°ch Th·ª©c C·ªßa S·ª± Ph√°t Tri·ªÉn",
    description: "S·ª± ph√°t tri·ªÉn b·∫Øt ƒë·∫ßu b·∫±ng vi·ªác t√≠ch l≈©y d·∫ßn v·ªÅ l∆∞·ª£ng. Khi ƒë·∫°t ƒë·∫øn gi·ªõi h·∫°n 'ƒëi·ªÉm n√∫t', m·ªôt 'b∆∞·ªõc nh·∫£y' v·ªÅ ch·∫•t s·∫Ω x·∫£y ra, t·∫°o ra s·ª± v·∫≠t m·ªõi.",
    icon: TrendingUp,
    color: "#22c55e", // Green
  },
  {
    name: "Quy lu·∫≠t Ph·ªß ƒë·ªãnh c·ªßa Ph·ªß ƒë·ªãnh",
    summary: "Khuynh H∆∞·ªõng C·ªßa S·ª± Ph√°t Tri·ªÉn",
    description: "S·ª± ph√°t tri·ªÉn di·ªÖn ra theo con ƒë∆∞·ªùng xo√°y ·ªëc. C√°i m·ªõi ra ƒë·ªùi t·ª´ c√°i c≈©, k·∫ø th·ª´a nh·ªØng y·∫øu t·ªë t√≠ch c·ª±c v√† ti·∫øn l√™n m·ªôt tr√¨nh ƒë·ªô cao h∆°n.",
    icon: RefreshCw,
    color: "#f59e0b", // Amber
  },
]

export function LawsHorizontalScrollSection() {
  const containerRef = useRef<HTMLDivElement>(null);
  const [activeIndex, setActiveIndex] = useState(0);

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const target = entry.target as HTMLElement;
          if (entry.isIntersecting) {
            target.classList.add("is-visible");
            const index = parseInt(target.getAttribute('data-index') || '0', 10);
            setActiveIndex(index);
          } else {
            target.classList.remove("is-visible");
          }
        });
      },
      {
        root: containerRef.current,
        threshold: 0.7,
      }
    );

    const cards = Array.from(containerRef.current?.children || []);
    cards.forEach((card) => observer.observe(card));

    return () => {
      cards.forEach((card) => observer.unobserve(card));
    };
  }, []);

  return (
    <section className="scroll-section bg-slate-900">
      <div ref={containerRef} className="horizontal-scroll-container h-full w-full">
        {laws.map((law, index) => {
          const Icon = law.icon
          return (
            <div key={index} className="horizontal-card" data-index={index}>
              <Icon className="absolute w-1/2 h-1/2 text-white/5 opacity-50 blur-3xl" style={{ color: law.color }}/>
              <div className="card-content-wrapper max-w-4xl text-center text-white z-10">
                <div className="inline-flex items-center gap-4 mb-8">
                  <div className="p-4 rounded-full" style={{ backgroundColor: `${law.color}20` }}>
                    <Icon style={{ color: law.color }} className="w-8 h-8" />
                  </div>
                  <h2 className="text-3xl font-bold" style={{ color: law.color }}>
                    {law.name}
                  </h2>
                </div>
                <h3 className="text-5xl md:text-7xl font-black mb-6 text-balance luxury-text bg-gradient-to-r from-white to-slate-400 bg-clip-text text-transparent">
                  {law.summary}
                </h3>
                <p className="text-xl md:text-2xl text-slate-300 leading-relaxed text-pretty">
                  {law.description}
                </p>
              </div>
            </div>
          )
        })}
      </div>

      <div className="absolute bottom-10 left-1/2 -translate-x-1/2 flex gap-3 z-20">
        {laws.map((_, index) => (
          <div
            key={index}
            className={`w-3 h-3 rounded-full transition-all duration-500 ${
              activeIndex === index ? 'scale-125 bg-white' : 'bg-white/30'
            }`}
          />
        ))}
      </div>
    </section>
  )
}

===== ./components/cta-section.tsx =====
// components/cta-section.tsx
"use client"

export function CTASection() {
  return (
    <section id="conclusion" className="py-20 bg-gradient-to-r from-accent to-secondary relative overflow-hidden">
      <div className="absolute inset-0 opacity-10">
        <div className="absolute top-10 left-10 w-32 h-32 border border-white rounded-full animate-float"></div>
        <div className="absolute bottom-20 right-1/4 w-16 h-16 border border-white rounded-full animate-float animation-delay-800"></div>
      </div>

      <div className="container mx-auto px-6 text-center relative z-10">
        <div className="max-w-4xl mx-auto">
          <h2 className="text-4xl md:text-5xl font-black text-white mb-6 animate-fade-in-up text-balance">
            K·∫øt Lu·∫≠n: Xu H∆∞·ªõng Ph√°t Tri·ªÉn T·∫•t Y·∫øu
          </h2>

          <div className="space-y-6 text-xl text-white/90 text-pretty leading-relaxed">
            <p className="animate-fade-in-up animation-delay-200">
              Quan h·ªá gi·ªØa AI v√† con ng∆∞·ªùi l√† m·ªôt <strong className="text-white">m√¢u thu·∫´n bi·ªán ch·ª©ng</strong> v·ª´a h·ª£p t√°c v·ª´a c·∫°nh tranh. S·ª± ph√°t tri·ªÉn c·ªßa AI kh√¥ng l√†m con ng∆∞·ªùi ‚Äúm·∫•t ch·ªó ƒë·ª©ng‚Äù, m√† th√∫c ƒë·∫©y con ng∆∞·ªùi b∆∞·ªõc l√™n m·ªôt t·∫ßm cao m·ªõi c·ªßa tr√≠ tu·ªá v√† s√°ng t·∫°o.
            </p>
            <p className="text-2xl font-semibold text-white/90 animate-fade-in-up animation-delay-400 luxury-text bg-clip-text text-transparent bg-gradient-to-r from-white to-slate-300">
              AI kh√¥ng ph·∫£i l√† k·∫ª th√π, c≈©ng kh√¥ng ch·ªâ l√† c√¥ng c·ª•. AI l√† t·∫•m g∆∞∆°ng ph·∫£n chi·∫øu s·ª± s√°ng t·∫°o v√¥ h·∫°n c·ªßa con ng∆∞·ªùi, ƒë·ªìng th·ªùi l√† ƒë·ªông l·ª±c th√∫c ƒë·∫©y x√£ h·ªôi lo√†i ng∆∞·ªùi ph√°t tri·ªÉn theo con ƒë∆∞·ªùng ph·ªß ƒë·ªãnh bi·ªán ch·ª©ng, ng√†y c√†ng ti·∫øn b·ªô, vƒÉn minh v√† nh√¢n vƒÉn h∆°n.
            </p>
          </div>
        </div>
      </div>
    </section>
  )
}

===== ./components/laws-section.tsx =====
// components/laws-section.tsx
"use client"

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Waves, TrendingUp, RefreshCw } from "lucide-react"

const laws = [
  {
    name: "Quy lu·∫≠t M√¢u thu·∫´n",
    description: "M·ªçi s·ª± v·∫≠t ƒë·ªÅu ch·ª©a ƒë·ª±ng c√°c m·∫∑t ƒë·ªëi l·∫≠p, v·ª´a th·ªëng nh·∫•t v·ª´a ƒë·∫•u tranh. Ch√≠nh s·ª± ƒë·∫•u tranh b√™n trong l√† ngu·ªìn g·ªëc l√†m s·ª± v·∫≠t v·∫≠n ƒë·ªông v√† ph√°t tri·ªÉn.",
    icon: Waves,
    color: "from-blue-500 to-purple-500",
  },
  {
    name: "Quy lu·∫≠t L∆∞·ª£ng ‚Äì Ch·∫•t",
    description: "Qu√° tr√¨nh ph√°t tri·ªÉn l√† s·ª± t√≠ch l≈©y d·∫ßn v·ªÅ l∆∞·ª£ng, ƒë·∫øn ƒëi·ªÉm n√∫t s·∫Ω d·∫´n ƒë·∫øn b∆∞·ªõc nh·∫£y v·ªÅ ch·∫•t, h√¨nh th√†nh ch·∫•t m·ªõi.",
    icon: TrendingUp,
    color: "from-green-500 to-teal-500",
  },
  {
    name: "Quy lu·∫≠t Ph·ªß ƒë·ªãnh c·ªßa Ph·ªß ƒë·ªãnh",
    description: "S·ª± ph√°t tri·ªÉn di·ªÖn ra theo con ƒë∆∞·ªùng xo√°y ·ªëc, kh√¥ng l·∫∑p l·∫°i y nguy√™n nh∆∞ng c√≥ t√≠nh k·∫ø th·ª´a, t·∫°o ra c√°i m·ªõi ·ªü tr√¨nh ƒë·ªô cao h∆°n.",
    icon: RefreshCw,
    color: "from-amber-500 to-orange-500",
  },
]

export function LawsSection() {
  return (
    <section id="laws-section" className="py-20 bg-gradient-to-b from-white to-slate-50">
      <div className="container mx-auto px-6">
        <div className="text-center mb-16">
          <Badge className="mb-4 bg-secondary text-white">L√Ω Thuy·∫øt N·ªÅn T·∫£ng</Badge>
          <h2 className="text-4xl md:text-5xl font-bold text-foreground mb-6">3 Quy Lu·∫≠t C∆° B·∫£n C·ªßa Ph√©p Bi·ªán Ch·ª©ng</h2>
          <p className="text-xl text-muted-foreground max-w-3xl mx-auto animate-fade-in-up">
            C√°c quy lu·∫≠t n√†y ch·ªâ ra b·∫£n ch·∫•t c·ªßa s·ª± v·∫≠n ƒë·ªông v√† ph√°t tri·ªÉn: kh√°ch quan, k·∫ø th·ª´a, th√¥ng qua m√¢u thu·∫´n v√† ƒë·∫•u tranh ƒë·ªÉ t·∫°o ra c√°i m·ªõi.
          </p>
        </div>

        <div className="grid md:grid-cols-3 gap-8">
          {laws.map((law, index) => (
            <Card
              key={index}
              className="group hover:scale-105 transition-all duration-300 hover:shadow-xl animate-fade-in-up border-0 overflow-hidden h-full flex flex-col"
              style={{ animationDelay: `${index * 200}ms` }}
            >
              <div className={`h-2 bg-gradient-to-r ${law.color}`}></div>
              <CardHeader>
                <div className="flex items-center gap-4 mb-2">
                  <div className={`p-3 rounded-full bg-gradient-to-r ${law.color} text-white shadow-lg`}>
                    <law.icon className="w-6 h-6" />
                  </div>
                  <CardTitle className="text-2xl text-foreground group-hover:text-accent transition-colors">
                    {law.name}
                  </CardTitle>
                </div>
              </CardHeader>
              <CardContent className="flex-grow">
                <p className="text-muted-foreground leading-relaxed">{law.description}</p>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    </section>
  )
}

===== ./components/hero-section.tsx =====
// components/hero-section.tsx
"use client";
import { ChevronDown, Cpu } from "lucide-react";

export function HeroSection() {
  return (
    <section className="scroll-section w-full">
      {/* Background Animation */}
      <div className="absolute inset-0 bg-gradient-to-br from-gray-900 via-slate-900 to-indigo-900 animate-aurora [animation-duration:20s]"></div>
      <div className="absolute inset-0 bg-grid-white/[0.05]"></div>

      <div className="container mx-auto px-6 text-center relative z-10">
        <div className="max-w-4xl mx-auto">
          <div className="inline-flex items-center gap-2 bg-white/10 backdrop-blur-sm px-6 py-3 rounded-full text-sm font-medium mb-8 animate-fade-in-up text-white border border-white/20">
            <Cpu className="w-4 h-4 animate-pulse text-indigo-400" />
            G√≥c nh√¨n t·ª´ ph√©p bi·ªán ch·ª©ng duy v·∫≠t
          </div>
          <h1 className="text-5xl md:text-7xl font-black text-white mb-6 animate-fade-in-up animation-delay-200 text-balance">
            AI v√† Con ng∆∞·ªùi
            <span className="block bg-gradient-to-r from-white via-indigo-300 to-white bg-clip-text text-transparent luxury-text">
              ƒê·ªëi t√°c hay ƒê·ªëi th·ªß?
            </span>
          </h1>
          <p className="text-xl md:text-2xl text-white/70 mb-8 animate-fade-in-up animation-delay-400 text-pretty max-w-3xl mx-auto leading-relaxed">
            S·ª± ph√°t tri·ªÉn nhanh ch√≥ng c·ªßa tr√≠ tu·ªá nh√¢n t·∫°o ƒëang l√†m thay ƒë·ªïi c√°ch con ng∆∞·ªùi lao ƒë·ªông, h·ªçc t·∫≠p v√† s√°ng t·∫°o. M·ªëi quan h·ªá n√†y c·∫ßn ƒë∆∞·ª£c nh√¨n nh·∫≠n th·∫ø n√†o t·ª´ g√≥c ƒë·ªô bi·ªán ch·ª©ng?
          </p>
        </div>
      </div>
      
      <div className="absolute bottom-8 left-1/2 -translate-x-1/2 animate-bounce z-20 flex flex-col items-center gap-1 text-white/70">
        <p className="text-sm font-semibold">Kh√°m ph√°</p>
        <ChevronDown className="w-6 h-6" />
      </div>
    </section>
  );
}

===== ./components/features-section.tsx =====
"use client"

import { useEffect, useRef, useState } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Zap, Palette, Smartphone, Globe, Sparkles } from "lucide-react"

const features = [
  {
    icon: Zap,
    title: "Animation M∆∞·ª£t M√†",
    description: "C√°c hi·ªáu ·ª©ng chuy·ªÉn ƒë·ªông ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a cho tr·∫£i nghi·ªám ng∆∞·ªùi d√πng t·ªët nh·∫•t",
  },
  {
    icon: Palette,
    title: "Thi·∫øt K·∫ø Hi·ªán ƒê·∫°i",
    description: "Giao di·ªán ƒë·∫πp m·∫Øt v·ªõi m√†u s·∫Øc v√† typography ƒë∆∞·ª£c ch·ªçn l·ªçc k·ªπ c√†ng",
  },
  {
    icon: Smartphone,
    title: "Responsive Design",
    description: "Ho·∫°t ƒë·ªông ho√†n h·∫£o tr√™n m·ªçi thi·∫øt b·ªã t·ª´ mobile ƒë·∫øn desktop",
  },
  {
    icon: Globe,
    title: "T·ªëi ∆Øu Hi·ªáu Su·∫•t",
    description: "T·∫£i nhanh v√† m∆∞·ª£t m√† v·ªõi c√¥ng ngh·ªá web hi·ªán ƒë·∫°i nh·∫•t",
  },
]

export function FeaturesSection() {
  const [visibleItems, setVisibleItems] = useState<number[]>([])
  const sectionRef = useRef<HTMLElement>(null)

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const index = Number.parseInt(entry.target.getAttribute("data-index") || "0")
            setVisibleItems((prev) => [...prev, index])
          }
        })
      },
      { threshold: 0.3 },
    )

    const cards = sectionRef.current?.querySelectorAll("[data-index]")
    cards?.forEach((card) => observer.observe(card))

    return () => observer.disconnect()
  }, [])

  return (
    <section id="features" ref={sectionRef} className="py-20 relative overflow-hidden">
      <div className="absolute inset-0 premium-gradient opacity-50"></div>
      <div className="absolute inset-0 bg-gradient-to-b from-background/90 via-muted/50 to-background/90"></div>

      <div className="absolute top-20 right-10 w-32 h-32 bg-gradient-to-br from-accent/20 to-secondary/20 rounded-full blur-xl animate-float"></div>
      <div className="absolute bottom-20 left-10 w-24 h-24 bg-gradient-to-br from-secondary/20 to-accent/20 rounded-full blur-xl animate-particle-float"></div>

      <div className="container mx-auto px-6 relative z-10">
        <div className="text-center mb-16">
          <div className="inline-flex items-center gap-2 glass-effect px-4 py-2 rounded-full text-sm font-medium mb-6 text-accent">
            <Sparkles className="w-4 h-4 animate-pulse" />
            T√≠nh nƒÉng ƒë·∫∑c bi·ªát
          </div>

          <h2 className="text-4xl md:text-5xl font-black text-foreground mb-4 animate-fade-in-up bg-gradient-to-r from-foreground via-accent to-foreground bg-clip-text text-transparent">
            T√≠nh NƒÉng N·ªïi B·∫≠t
          </h2>
          <p className="text-xl text-muted-foreground animate-fade-in-up animation-delay-200 text-pretty max-w-2xl mx-auto leading-relaxed">
            Nh·ªØng ƒëi·ªÅu l√†m n√™n s·ª± kh√°c bi·ªát c·ªßa ch√∫ng t√¥i
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
          {features.map((feature, index) => (
            <Card
              key={index}
              data-index={index}
              className={`group hover:shadow-2xl transition-all duration-500 hover:-translate-y-3 glass-effect border-accent/20 relative overflow-hidden ${
                visibleItems.includes(index)
                  ? index % 2 === 0
                    ? "animate-slide-in-left"
                    : "animate-slide-in-right"
                  : "opacity-0"
              }`}
              style={{ animationDelay: `${index * 0.2}s` }}
            >
              <div className="absolute inset-0 bg-gradient-to-br from-accent/5 to-secondary/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>

              <CardContent className="p-6 text-center relative z-10">
                <div className="w-16 h-16 bg-gradient-to-br from-accent/20 to-secondary/20 rounded-full flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-all duration-300 relative overflow-hidden">
                  <div className="absolute inset-0 bg-gradient-to-br from-accent to-secondary opacity-0 group-hover:opacity-20 transition-opacity duration-300 rounded-full"></div>
                  <feature.icon className="w-8 h-8 text-accent group-hover:text-white transition-colors duration-300 relative z-10" />
                </div>

                <h3 className="text-xl font-bold text-card-foreground mb-2 group-hover:text-accent transition-colors duration-300">
                  {feature.title}
                </h3>
                <p className="text-muted-foreground text-pretty leading-relaxed group-hover:text-card-foreground/80 transition-colors duration-300">
                  {feature.description}
                </p>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    </section>
  )
}


===== ./components/analysis-section.tsx =====
// components/analysis-section.tsx
"use client";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";

const analyses = [
    {
        law: "Theo Quy lu·∫≠t M√¢u thu·∫´n",
        title: "ƒê·ªông L·ª±c Th√∫c ƒê·∫©y",
        description: "AI (t·ªëc ƒë·ªô, t·ª± ƒë·ªông h√≥a) v√† con ng∆∞·ªùi (s√°ng t·∫°o, ƒë·∫°o ƒë·ª©c) l√† hai m·∫∑t ƒë·ªëi l·∫≠p. Ch√∫ng v·ª´a th·ªëng nh·∫•t (AI ph·ª•c v·ª• con ng∆∞·ªùi), v·ª´a ƒë·∫•u tranh (AI c·∫°nh tranh vi·ªác l√†m). M√¢u thu·∫´n n√†y ch√≠nh l√† ƒë·ªông l·ª±c bu·ªôc con ng∆∞·ªùi ph·∫£i th√≠ch ·ª©ng v√† ƒë·ªïi m·ªõi.",
    },
    {
        law: "Theo Quy lu·∫≠t L∆∞·ª£ng ‚Äì Ch·∫•t",
        title: "B∆∞·ªõc Nh·∫£y V·ªÅ Ch·∫•t",
        description: "Ban ƒë·∫ßu, AI ch·ªâ h·ªó tr·ª£ (thay ƒë·ªïi v·ªÅ l∆∞·ª£ng). Khi AI c√≥ th·ªÉ t·ª± s√°ng t·∫°o, ƒë√≥ l√† m·ªôt 'b∆∞·ªõc nh·∫£y' v·ªÅ ch·∫•t. Lao ƒë·ªông thay ƒë·ªïi b·∫£n ch·∫•t, con ng∆∞·ªùi chuy·ªÉn t·ª´ vai tr√≤ th·ª±c thi sang qu·∫£n tr·ªã v√† s√°ng t·∫°o ·ªü t·∫ßng cao h∆°n.",
    },
    {
        law: "Theo Quy lu·∫≠t Ph·ªß ƒë·ªãnh",
        title: "Ph√°t Tri·ªÉn Xo√°y ·ªêc",
        description: "AI kh√¥ng x√≥a b·ªè con ng∆∞·ªùi m√† k·∫ø th·ª´a tri th·ª©c ƒë·ªÉ ph·ªß ƒë·ªãnh c√°c h√¨nh th·ª©c lao ƒë·ªông c≈©. Qu√° tr√¨nh di·ªÖn ra theo ƒë∆∞·ªùng xo√°y ·ªëc: Con ng∆∞·ªùi t·∫°o ra AI ‚Üí AI thay ƒë·ªïi con ng∆∞·ªùi ‚Üí Con ng∆∞·ªùi l·∫°i c·∫£i ti·∫øn AI, t·∫°o ra m·ªôt x√£ h·ªôi ·ªü t·∫ßm cao m·ªõi.",
    },
];

export function AnalysisSection() {
  return (
    <section className="scroll-section dark text-white w-full bg-slate-900">
        <div className="absolute inset-0 bg-grid-white/[0.05]"></div>
        <div className="absolute inset-0 bg-gradient-to-b from-slate-900 via-slate-900/90 to-slate-900"></div>
        <div className="absolute top-0 left-0 w-72 h-72 bg-accent/20 rounded-full filter blur-3xl animate-float"></div>
        <div className="absolute bottom-0 right-0 w-72 h-72 bg-secondary/20 rounded-full filter blur-3xl animate-float [animation-delay:-3s]"></div>
      <div className="container mx-auto relative z-10">
        <div className="text-center mb-16 animate-fade-in-up">
          <Badge className="mb-4" variant={"default"}>V·∫≠n D·ª•ng Ph√¢n T√≠ch</Badge>
          <h2 className="text-4xl md:text-5xl font-bold text-white mb-6 luxury-text">
            M·ªëi Quan H·ªá Gi·ªØa AI v√† Con Ng∆∞·ªùi
          </h2>
          <p className="text-xl text-white/70 max-w-3xl mx-auto text-pretty">
            √Åp d·ª•ng c√°c quy lu·∫≠t bi·ªán ch·ª©ng ƒë·ªÉ l√†m s√°ng t·ªè b·∫£n ch·∫•t v√† xu h∆∞·ªõng c·ªßa m·ªëi quan h·ªá ph·ª©c t·∫°p n√†y.
          </p>
        </div>
        <div className="grid md:grid-cols-3 gap-8">
          {analyses.map((analysis, index) => (
            <Card
              key={index}
              className="group sophisticated-hover animate-fade-in-up border-white/10 bg-white/5 h-full text-left"
              style={{ animationDelay: `${(index + 1) * 200}ms` }}
            >
              <CardHeader>
                <Badge variant="secondary" className="mb-3 w-fit">{analysis.law}</Badge>
                <CardTitle className="text-2xl text-white group-hover:text-accent transition-colors duration-300">
                  {analysis.title}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-white/70 leading-relaxed">{analysis.description}</p>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    </section>
  );
}

===== ./components/key-figures-section.tsx =====
// components/key-figures-section.tsx
"use client"

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"

const analyses = [
  {
    law: "Theo Quy lu·∫≠t M√¢u thu·∫´n",
    title: "ƒê·ªông L·ª±c Th√∫c ƒê·∫©y",
    description: "AI (t·ªëc ƒë·ªô, t·ª± ƒë·ªông h√≥a) v√† con ng∆∞·ªùi (s√°ng t·∫°o, ƒë·∫°o ƒë·ª©c) l√† hai m·∫∑t ƒë·ªëi l·∫≠p. Ch√∫ng v·ª´a th·ªëng nh·∫•t (AI ph·ª•c v·ª• con ng∆∞·ªùi), v·ª´a ƒë·∫•u tranh (AI c·∫°nh tranh vi·ªác l√†m). M√¢u thu·∫´n n√†y ch√≠nh l√† ƒë·ªông l·ª±c bu·ªôc con ng∆∞·ªùi ph·∫£i th√≠ch ·ª©ng, ƒë·ªïi m·ªõi v√† ph√°t tri·ªÉn.",
  },
  {
    law: "Theo Quy lu·∫≠t L∆∞·ª£ng ‚Äì Ch·∫•t",
    title: "B∆∞·ªõc Nh·∫£y V·ªÅ Ch·∫•t",
    description: "Ban ƒë·∫ßu, AI ch·ªâ h·ªó tr·ª£ (thay ƒë·ªïi v·ªÅ l∆∞·ª£ng). Khi AI c√≥ th·ªÉ t·ª± s√°ng t·∫°o (vi·∫øt vƒÉn, v·∫Ω tranh), ƒë√≥ l√† m·ªôt 'b∆∞·ªõc nh·∫£y' v·ªÅ ch·∫•t. Lao ƒë·ªông thay ƒë·ªïi b·∫£n ch·∫•t, con ng∆∞·ªùi chuy·ªÉn t·ª´ vai tr√≤ th·ª±c thi sang qu·∫£n tr·ªã v√† s√°ng t·∫°o ·ªü t·∫ßng cao h∆°n.",
  },
  {
    law: "Theo Quy lu·∫≠t Ph·ªß ƒë·ªãnh",
    title: "Ph√°t Tri·ªÉn Xo√°y ·ªêc",
    description: "AI kh√¥ng x√≥a b·ªè con ng∆∞·ªùi m√† k·∫ø th·ª´a tri th·ª©c ƒë·ªÉ ph·ªß ƒë·ªãnh c√°c h√¨nh th·ª©c lao ƒë·ªông c≈©. Qu√° tr√¨nh n√†y di·ªÖn ra theo ƒë∆∞·ªùng xo√°y ·ªëc: Con ng∆∞·ªùi t·∫°o ra AI ‚Üí AI thay ƒë·ªïi con ng∆∞·ªùi ‚Üí Con ng∆∞·ªùi l·∫°i c·∫£i ti·∫øn AI, t·∫°o ra m·ªôt x√£ h·ªôi ·ªü t·∫ßm cao m·ªõi.",
  },
]

export function KeyFiguresSection() {
  return (
    <section className="py-20 bg-gradient-to-b from-slate-50 to-white">
      <div className="container mx-auto px-6">
        <div className="text-center mb-16">
          <Badge className="mb-4 bg-accent text-white">V·∫≠n D·ª•ng Ph√¢n T√≠ch</Badge>
          <h2 className="text-4xl md:text-5xl font-bold text-foreground mb-6">Ph√¢n T√≠ch M·ªëi Quan H·ªá Gi·ªØa AI v√† Con Ng∆∞·ªùi</h2>
          <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
            √Åp d·ª•ng c√°c quy lu·∫≠t bi·ªán ch·ª©ng ƒë·ªÉ l√†m s√°ng t·ªè b·∫£n ch·∫•t v√† xu h∆∞·ªõng c·ªßa m·ªëi quan h·ªá ph·ª©c t·∫°p n√†y.
          </p>
        </div>

        <div className="grid md:grid-cols-3 gap-8">
          {analyses.map((analysis, index) => (
            <Card
              key={index}
              className="group hover:scale-105 transition-all duration-300 hover:shadow-xl animate-fade-in-up border-0 overflow-hidden h-full"
              style={{ animationDelay: `${index * 200}ms` }}
            >
              <CardHeader>
                <Badge className="mb-3 w-fit">{analysis.law}</Badge>
                <CardTitle className="text-2xl text-foreground group-hover:text-accent transition-colors">
                  {analysis.title}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-muted-foreground leading-relaxed">{analysis.description}</p>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    </section>
  )
}

===== ./components/testimonials-section.tsx =====
"use client"

import { useState, useEffect } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Star } from "lucide-react"

const testimonials = [
  {
    name: "Nguy·ªÖn VƒÉn A",
    role: "CEO, Tech Startup",
    content: "Animation tuy·ªát v·ªùi! Trang web c·ªßa ch√∫ng t√¥i tr·ªü n√™n s·ªëng ƒë·ªông v√† thu h√∫t h∆°n r·∫•t nhi·ªÅu.",
    rating: 5,
    avatar: "/professional-man-avatar.png",
  },
  {
    name: "Tr·∫ßn Th·ªã B",
    role: "Designer",
    content: "Thi·∫øt k·∫ø hi·ªán ƒë·∫°i v√† chuy√™n nghi·ªáp. Kh√°ch h√†ng c·ªßa t√¥i r·∫•t h√†i l√≤ng v·ªõi k·∫øt qu·∫£.",
    rating: 5,
    avatar: "/professional-woman-avatar.png",
  },
  {
    name: "L√™ Minh C",
    role: "Marketing Manager",
    content: "T·ª∑ l·ªá chuy·ªÉn ƒë·ªïi tƒÉng 40% sau khi s·ª≠ d·ª•ng. ƒê·∫ßu t∆∞ r·∫•t ƒë√°ng gi√°!",
    rating: 5,
    avatar: "/business-man-avatar.png",
  },
]

export function TestimonialsSection() {
  const [currentIndex, setCurrentIndex] = useState(0)

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentIndex((prev) => (prev + 1) % testimonials.length)
    }, 4000)
    return () => clearInterval(interval)
  }, [])

  return (
    <section id="testimonials" className="py-20 bg-background">
      <div className="container mx-auto px-6">
        <div className="text-center mb-16">
          <h2 className="text-4xl md:text-5xl font-black text-foreground mb-4 animate-fade-in-up">Kh√°ch H√†ng N√≥i G√¨</h2>
          <p className="text-xl text-muted-foreground animate-fade-in-up animation-delay-200 text-pretty max-w-2xl mx-auto">
            Nh·ªØng ph·∫£n h·ªìi t√≠ch c·ª±c t·ª´ kh√°ch h√†ng c·ªßa ch√∫ng t√¥i
          </p>
        </div>

        <div className="max-w-4xl mx-auto">
          <div className="relative overflow-hidden">
            <div
              className="flex transition-transform duration-500 ease-in-out"
              style={{ transform: `translateX(-${currentIndex * 100}%)` }}
            >
              {testimonials.map((testimonial, index) => (
                <div key={index} className="w-full flex-shrink-0 px-4">
                  <Card className="border-border/50 shadow-lg">
                    <CardContent className="p-8 text-center">
                      <div className="flex justify-center mb-4">
                        {[...Array(testimonial.rating)].map((_, i) => (
                          <Star key={i} className="w-5 h-5 text-yellow-400 fill-current" />
                        ))}
                      </div>
                      <p className="text-lg text-card-foreground mb-6 italic text-pretty">"{testimonial.content}"</p>
                      <div className="flex items-center justify-center gap-4">
                        <img
                          src={testimonial.avatar || "/placeholder.svg"}
                          alt={testimonial.name}
                          className="w-12 h-12 rounded-full"
                        />
                        <div>
                          <h4 className="font-bold text-card-foreground">{testimonial.name}</h4>
                          <p className="text-muted-foreground text-sm">{testimonial.role}</p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              ))}
            </div>
          </div>

          <div className="flex justify-center mt-8 gap-2">
            {testimonials.map((_, index) => (
              <button
                key={index}
                onClick={() => setCurrentIndex(index)}
                className={`w-3 h-3 rounded-full transition-all duration-300 ${
                  index === currentIndex ? "bg-accent scale-125" : "bg-border hover:bg-accent/50"
                }`}
              />
            ))}
          </div>
        </div>
      </div>
    </section>
  )
}


===== ./components/conclusion-section.tsx =====
// components/conclusion-section.tsx
"use client";
import { Sparkles } from "lucide-react";

export function ConclusionSection() {
  return (
    <section className="scroll-section dark w-full bg-gradient-to-br from-accent/90 to-secondary">
      <div className="absolute inset-0 opacity-10">
        <div className="absolute top-10 left-10 w-32 h-32 border-2 border-white rounded-full animate-float [animation-delay:-1s]"></div>
        <div className="absolute bottom-20 right-1/4 w-24 h-24 border border-white rounded-full animate-float [animation-delay:-3s]"></div>
        <div className="absolute top-1/2 left-1/3 w-16 h-16 border-2 border-white rounded-full animate-float"></div>
      </div>
      <div className="container mx-auto text-center relative z-10">
        <div className="max-w-4xl mx-auto">
          <h2 className="text-4xl md:text-5xl font-black text-white mb-8 animate-fade-in-up text-balance">
            K·∫øt Lu·∫≠n: Xu H∆∞·ªõng Ph√°t Tri·ªÉn T·∫•t Y·∫øu
          </h2>
          <div className="space-y-8 text-xl text-white/90 text-pretty leading-relaxed">
            <p className="animate-fade-in-up [animation-delay:200ms]">
              Quan h·ªá gi·ªØa AI v√† con ng∆∞·ªùi l√† m·ªôt <strong className="font-bold text-white">m√¢u thu·∫´n bi·ªán ch·ª©ng</strong>. S·ª± ph√°t tri·ªÉn c·ªßa AI kh√¥ng l√†m con ng∆∞·ªùi ‚Äúm·∫•t ch·ªó ƒë·ª©ng‚Äù, m√† th√∫c ƒë·∫©y con ng∆∞·ªùi b∆∞·ªõc l√™n m·ªôt <strong className="font-bold text-white">t·∫ßm cao m·ªõi c·ªßa tr√≠ tu·ªá v√† s√°ng t·∫°o</strong>.
            </p>
            <div className="animate-fade-in-up [animation-delay:400ms]">
              <div className="inline-block p-6 rounded-xl glass-effect">
                 <div className="flex items-start text-left gap-4">
                    <Sparkles className="w-10 h-10 mt-1 text-amber-300 flex-shrink-0" />
                    <p className="text-2xl font-semibold text-white luxury-text bg-clip-text text-transparent bg-gradient-to-r from-white to-slate-300">
                      AI l√† t·∫•m g∆∞∆°ng ph·∫£n chi·∫øu s·ª± s√°ng t·∫°o v√¥ h·∫°n c·ªßa con ng∆∞·ªùi, v√† l√† ƒë·ªông l·ª±c th√∫c ƒë·∫©y x√£ h·ªôi ng√†y c√†ng ti·∫øn b·ªô, vƒÉn minh v√† nh√¢n vƒÉn h∆°n.
                    </p>
                 </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}

===== ./components/historical-periods-section.tsx =====
// components/historical-periods-section.tsx
"use client"

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Waves, TrendingUp, RefreshCw } from "lucide-react"

const laws = [
  {
    name: "Quy lu·∫≠t M√¢u thu·∫´n",
    summary: "Ngu·ªìn g·ªëc c·ªßa s·ª± ph√°t tri·ªÉn",
    description: "M·ªçi s·ª± v·∫≠t ƒë·ªÅu ch·ª©a ƒë·ª±ng c√°c m·∫∑t ƒë·ªëi l·∫≠p, v·ª´a th·ªëng nh·∫•t v·ª´a ƒë·∫•u tranh. Ch√≠nh s·ª± ƒë·∫•u tranh l√† ngu·ªìn g·ªëc n·ªôi t·∫°i c·ªßa m·ªçi s·ª± v·∫≠n ƒë·ªông.",
    icon: Waves,
    color: "text-blue-500",
    borderColor: "border-blue-500/20",
    hoverBorderColor: "hover:border-blue-500/50"
  },
  {
    name: "Quy lu·∫≠t L∆∞·ª£ng - Ch·∫•t",
    summary: "C√°ch th·ª©c c·ªßa s·ª± ph√°t tri·ªÉn",
    description: "S·ª± ph√°t tri·ªÉn l√† s·ª± t√≠ch l≈©y d·∫ßn v·ªÅ l∆∞·ª£ng, khi ƒë·∫øn 'ƒëi·ªÉm n√∫t' s·∫Ω d·∫´n ƒë·∫øn 'b∆∞·ªõc nh·∫£y' v·ªÅ ch·∫•t, t·∫°o ra s·ª± v·∫≠t m·ªõi v·ªõi ch·∫•t m·ªõi.",
    icon: TrendingUp,
    color: "text-green-500",
    borderColor: "border-green-500/20",
    hoverBorderColor: "hover:border-green-500/50"
  },
  {
    name: "Quy lu·∫≠t Ph·ªß ƒë·ªãnh",
    summary: "Khuynh h∆∞·ªõng c·ªßa s·ª± ph√°t tri·ªÉn",
    description: "S·ª± ph√°t tri·ªÉn di·ªÖn ra theo ƒë∆∞·ªùng xo√°y ·ªëc. C√°i m·ªõi ra ƒë·ªùi t·ª´ c√°i c≈©, k·∫ø th·ª´a c√°c y·∫øu t·ªë t√≠ch c·ª±c v√† ti·∫øn l√™n m·ªôt tr√¨nh ƒë·ªô cao h∆°n.",
    icon: RefreshCw,
    color: "text-amber-500",
    borderColor: "border-amber-500/20",
    hoverBorderColor: "hover:border-amber-500/50"
  },
]

export function HistoricalPeriodsSection() {
  return (
    <section className="scroll-section w-full bg-gradient-to-b from-background to-slate-50">
      <div className="container mx-auto px-6">
        <div className="text-center mb-16">
          <Badge className="mb-4 bg-primary text-primary-foreground">N·ªÅn T·∫£ng L√Ω Thuy·∫øt</Badge>
          <h2 className="text-4xl md:text-5xl font-bold text-foreground mb-6">3 Quy Lu·∫≠t C∆° B·∫£n C·ªßa Ph√©p Bi·ªán Ch·ª©ng</h2>
          <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
            C√°c quy lu·∫≠t n√†y ch·ªâ ra b·∫£n ch·∫•t c·ªßa s·ª± v·∫≠n ƒë·ªông: kh√°ch quan, k·∫ø th·ª´a, v√† th√¥ng qua m√¢u thu·∫´n ƒë·ªÉ t·∫°o ra c√°i m·ªõi.
          </p>
        </div>

        <div className="grid md:grid-cols-3 gap-8">
          {laws.map((law, index) => (
            <Card
              key={index}
              className={`group transition-all duration-300 animate-fade-in-up h-full flex flex-col bg-card/50 backdrop-blur-sm border ${law.borderColor} ${law.hoverBorderColor} hover:shadow-2xl hover:shadow-slate-300/30 hover:-translate-y-2`}
              style={{ animationDelay: `${index * 200}ms` }}
            >
              <CardHeader className="flex-row items-center gap-4">
                <div className={`p-3 rounded-lg bg-white border shadow-sm`}>
                  <law.icon className={`w-6 h-6 ${law.color}`} />
                </div>
                <div>
                  <CardTitle className={`text-xl font-bold text-foreground`}>
                    {law.name}
                  </CardTitle>
                  <p className="text-sm text-muted-foreground">{law.summary}</p>
                </div>
              </CardHeader>
              <CardContent className="flex-grow pt-0">
                <p className="text-muted-foreground leading-relaxed">{law.description}</p>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    </section>
  )
}

===== ./components/navigation.tsx =====
"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"

export function Navigation() {
  const [isScrolled, setIsScrolled] = useState(false)

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 50)
    }
    window.addEventListener("scroll", handleScroll)
    return () => window.removeEventListener("scroll", handleScroll)
  }, [])

  return (
    <nav
      className={`fixed top-0 w-full z-50 transition-all duration-300 ${
        isScrolled ? "bg-background/95 backdrop-blur-sm shadow-lg" : "bg-transparent"
      }`}
    >
      <div className="container mx-auto px-6 py-4">
        <div className="flex items-center justify-between">
          <div className="text-2xl font-bold text-primary animate-fade-in-up">‚ú® AnimateLand</div>
          <div className="hidden md:flex items-center space-x-8 animate-fade-in-up animation-delay-200">
            <a href="#features" className="text-foreground hover:text-accent transition-colors duration-300">
              T√≠nh nƒÉng
            </a>
            <a href="#testimonials" className="text-foreground hover:text-accent transition-colors duration-300">
              ƒê√°nh gi√°
            </a>
            <a href="#contact" className="text-foreground hover:text-accent transition-colors duration-300">
              Li√™n h·ªá
            </a>
          </div>
          <Button className="animate-fade-in-up animation-delay-400 hover:scale-105 transition-transform duration-300">
            B·∫Øt ƒë·∫ßu ngay
          </Button>
        </div>
      </div>
    </nav>
  )
}


===== ./components/ui/card.tsx =====
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


===== ./components/ui/badge.tsx =====
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }


===== ./components/ui/button.tsx =====
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


===== ./lib/utils.ts =====
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


===== ./app/globals.css =====
/* app/globals.css */

@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

:root {
  /* ... (to√†n b·ªô c√°c bi·∫øn CSS :root v√† .dark c·ªßa b·∫°n gi·ªØ nguy√™n) ... */
  --background: #ffffff;
  --foreground: #1f2937;
  --card: #f8fafc;
  --card-foreground: #374151;
  --popover: #ffffff;
  --popover-foreground: #1f2937;
  --primary: #374151;
  --primary-foreground: #ffffff;
  --secondary: #6366f1;
  --secondary-foreground: #ffffff;
  --muted: #f8fafc;
  --muted-foreground: #1f2937;
  --accent: #6366f1;
  --accent-foreground: #ffffff;
  --destructive: #ef4444;
  --destructive-foreground: #ffffff;
  --border: #e5e7eb;
  --input: #f8fafc;
  --ring: rgba(99, 102, 241, 0.5);
  --chart-1: #6366f1;
  --chart-2: #4f46e5;
  --chart-3: #4338ca;
  --chart-4: #3730a3;
  --chart-5: #312e81;
  --radius: 0.5rem;
  --sidebar: #1f2937;
  --sidebar-foreground: #ffffff;
  --sidebar-primary: #374151;
  --sidebar-primary-foreground: #ffffff;
  --sidebar-accent: #6366f1;
  --sidebar-accent-foreground: #ffffff;
  --sidebar-border: #e5e7eb;
  --sidebar-ring: rgba(99, 102, 241, 0.5);
}

.dark {
  --background: #1f2937;
  --foreground: #ffffff;
  --card: #374151;
  --card-foreground: #ffffff;
  --popover: #374151;
  --popover-foreground: #ffffff;
  --primary: #6366f1;
  --primary-foreground: #ffffff;
  --secondary: #4f46e5;
  --secondary-foreground: #ffffff;
  --muted: #374151;
  --muted-foreground: #ffffff;
  --accent: #6366f1;
  --accent-foreground: #ffffff;
  --destructive: #ef4444;
  --destructive-foreground: #ffffff;
  --border: #4b5563;
  --input: #374151;
  --ring: rgba(99, 102, 241, 0.5);
  --chart-1: #6366f1;
  --chart-2: #4f46e5;
  --chart-3: #4338ca;
  --chart-4: #3730a3;
  --chart-5: #312e81;
  --sidebar: #374151;
  --sidebar-foreground: #ffffff;
  --sidebar-primary: #6366f1;
  --sidebar-primary-foreground: #ffffff;
  --sidebar-accent: #4f46e5;
  --sidebar-accent-foreground: #ffffff;
  --sidebar-border: #4b5563;
  --sidebar-ring: rgba(99, 102, 241, 0.5);
}

@theme inline {
  /* ... (to√†n b·ªô ph·∫ßn @theme inline c·ªßa b·∫°n gi·ªØ nguy√™n) ... */
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

/* ... (to√†n b·ªô c√°c keyframes v√† class animation c≈© c·ªßa b·∫°n gi·ªØ nguy√™n, t·ª´ @keyframes float ƒë·∫øn .sophisticated-hover:hover) ... */
@keyframes float {
  0%,
  100% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(-20px);
  }
}
/* ... */
.sophisticated-hover:hover {
  transform: translateY(-12px) rotateX(15deg);
  box-shadow: 0 25px 80px rgba(0, 0, 0, 0.2), 0 0 60px rgba(99, 102, 241, 0.3);
}


/* === PH·∫¶N CSS N√ÇNG C·∫§P CU·ªêI C√ôNG (ƒê√É S·ª¨A L·ªñI) === */

/* T·∫Øt thanh cu·ªôn m·∫∑c ƒë·ªãnh c·ªßa body */
body {
  overflow: hidden;
}

html {
  scroll-behavior: smooth;
}

/* 1. Container cu·ªôn D·ªåC to√†n trang */
.scroll-container {
  overflow-y: scroll;
  scroll-snap-type: y mandatory;
  height: 100vh;
}

.scroll-section {
  scroll-snap-align: start;
  height: 100vh;
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden;
}

/* 2. Container cu·ªôn NGANG cho ph·∫ßn Laws */
.horizontal-scroll-container {
  display: flex;
  overflow-x: scroll;
  scroll-snap-type: x mandatory;
  /* ·∫®n thanh cu·ªôn ngang */
  -ms-overflow-style: none; /* IE and Edge */
  scrollbar-width: none; /* Firefox */
}
.horizontal-scroll-container::-webkit-scrollbar {
  display: none; /* Chrome, Safari, and Opera */
}

.horizontal-card {
  width: 100vw;
  height: 100vh;
  flex-shrink: 0;
  scroll-snap-align: start;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 2rem;
  position: relative;
}

/* 3. Animation cho n·ªôi dung (S·ª¨A L·ªñI M·∫§T CH·ªÆ) */
@keyframes contentFadeInUp {
  from {
    opacity: 0;
    transform: translateY(25px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.card-content-wrapper {
  opacity: 0; /* M·∫∑c ƒë·ªãnh ·∫©n */
}

/* Khi slide ƒë∆∞·ª£c k√≠ch ho·∫°t (c√≥ class is-visible), √°p d·ª•ng animation */
.horizontal-card.is-visible .card-content-wrapper {
  animation: contentFadeInUp 0.8s cubic-bezier(0.25, 1, 0.5, 1) 0.3s forwards;
}

===== ./app/page.tsx =====
// app/page.tsx
import { HeroSection } from "@/components/hero-section";
import { LawsHorizontalScrollSection } from "@/components/laws-horizontal-scroll-section";
import { AnalysisSection } from "@/components/analysis-section";
import { ConclusionSection } from "@/components/conclusion-section";
import { HistoricalPeriodsSection } from "@/components/historical-periods-section";

export default function Home() {
  return (
    <main>
      {/* 
        Container n√†y cho ph√©p cu·ªôn to√†n m√†n h√¨nh t·ª´ng section.
        M·ªói component con l√† m·ªôt "scroll-section" chi·∫øm 100vh.
      */}
      <div className="scroll-container">
        <HeroSection />
        <LawsHorizontalScrollSection />
        <AnalysisSection />
        <ConclusionSection />
      </div>

      {/* 
        Ph·∫ßn n·ªôi dung th√™m, kh√¥ng n·∫±m trong hi·ªáu ·ª©ng cu·ªôn to√†n m√†n h√¨nh.
        B·∫°n c√≥ th·ªÉ ƒë·∫∑t c√°c section truy·ªÅn th·ªëng ·ªü ƒë√¢y n·∫øu mu·ªën.
        V√≠ d·ª•: T√¥i ƒë√£ t·∫°o m·ªôt section ƒë·ªÉ tr√¨nh b√†y l·∫°i 3 quy lu·∫≠t 
        theo d·∫°ng l∆∞·ªõi tƒ©nh ƒë·ªÉ d·ªÖ ƒë·ªçc h∆°n.
      */}
      <HistoricalPeriodsSection />
    </main>
  );
}

===== ./app/layout.tsx =====
// app/layout.tsx
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";

const inter = Inter({ subsets: ["latin", "vietnamese"], display: "swap" });

export const metadata: Metadata = {
  title: "AI v√† Con ng∆∞·ªùi ‚Äì ƒê·ªëi t√°c hay ƒê·ªëi th·ªß?",
  description: "Ph√¢n t√≠ch m·ªëi quan h·ªá gi·ªØa AI v√† con ng∆∞·ªùi d∆∞·ªõi g√≥c nh√¨n ph√©p bi·ªán ch·ª©ng duy v·∫≠t.",
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="vi">
      <body className={inter.className}>{children}</body>
    </html>
  );
}

===== DIRECTORY TREE =====
./
    README.md
    next.config.js
    tailwind.config.ts
    components.json
    postcss.config.mjs
    eslint.config.mjs
    tsconfig.json
    next-env.d.ts
    components/
        timeline-section.tsx
        laws-horizontal-scroll-section.tsx
        cta-section.tsx
        laws-section.tsx
        hero-section.tsx
        features-section.tsx
        analysis-section.tsx
        key-figures-section.tsx
        testimonials-section.tsx
        conclusion-section.tsx
        historical-periods-section.tsx
        navigation.tsx
        ui/
            card.tsx
            badge.tsx
            button.tsx
    lib/
        utils.ts
    app/
        globals.css
        page.tsx
        layout.tsx
    public/
        professional-man-avatar.png
        business-man-avatar.png
        professional-woman-avatar.png
